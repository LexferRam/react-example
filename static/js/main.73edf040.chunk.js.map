{"version":3,"sources":["components/Navbar.js","temaConfig.js","components/Listas.js","components/Cajon.js","components/Cajita.js","components/Contenedor.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","menuButton","marginRight","spacing","breakpoints","up","width","display","title","flexGrow","appBar","marginLeft","Navbar","props","classes","AppBar","className","Toolbar","IconButton","aria-label","color","onClick","accionAbrir","Typography","variant","Button","createMuiTheme","palette","primary","main","purple","contrastText","Listas","compoenents","ListItem","button","ListItemIcon","ListItemText","Divider","estilos","drawer","flexShrink","drawerPaper","toolbar","mixins","Cajon","clases","Drawer","paper","anchor","open","onClose","Cajita","Grid","container","item","xs","sm","md","Box","border","root","content","backgroundColor","background","default","padding","Contenedor","React","useState","abrir","setAbrir","Hidden","xsDown","smUp","useStyle","btn_personalizado","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73edf040.chunk.js","sourcesContent":["import { Button, IconButton, makeStyles } from \"@material-ui/core\";\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuButton: {\r\n    //por defecto en spacing son 8px, al pasar 2 se multipplica por 2\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${240}px)`,\r\n      display: \"none\",\r\n    },\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${240}px)`,\r\n      marginLeft: 240,\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Navbar(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.appBar}>\r\n      <Toolbar>\r\n        <IconButton\r\n          aria-label=\"menu\"\r\n          color=\"inherit\"\r\n          className={classes.menuButton}\r\n          onClick={() => props.accionAbrir()}\r\n        >\r\n          <ListIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Lexfer\r\n        </Typography>\r\n        <Button variant=\"text\" color=\"inherit\">\r\n          Login\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n//Usando los colores de material en =>> customization =>> color\r\nimport purple from \"@material-ui/core/colors/purple\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    //ahora el color del primary es el orange\r\n    primary: {\r\n      main: purple[700],\r\n      contrastText: \"#fff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport AdbIcon from \"@material-ui/icons/Adb\";\r\nimport AppleIcon from \"@material-ui/icons/Apple\";\r\n\r\nfunction Listas() {\r\n  return (\r\n    <div>\r\n      <List compoenents=\"nav\">\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <AdbIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Mi 1er elemento\" />\r\n        </ListItem>\r\n\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <AppleIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Mi 2do elemento\" />\r\n        </ListItem>\r\n      </List>\r\n\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Listas;\r\n","import React from \"react\";\r\nimport { makeStyles, Drawer, Divider } from \"@material-ui/core\";\r\nimport Listas from \"./Listas\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst estilos = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: 240,\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n}));\r\n\r\nfunction Cajon(props) {\r\n  const clases = estilos();\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        className={clases.drawer}\r\n        classes={{ paper: clases.drawerPaper }}\r\n        anchor=\"left\"\r\n        variant={props.variant}\r\n        open={props.open}\r\n        onClose={props.onClose ? props.onClose : null}\r\n      >\r\n        <div className={clases.toolbar}></div>\r\n        <Divider />\r\n        <Listas />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cajon;\r\n","import React from \"react\";\r\nimport { Box, Grid } from \"@material-ui/core\";\r\n\r\nfunction Cajita() {\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Box border={2}>x12</Box>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Box border={2}>x12</Box>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cajita;\r\n\r\n{\r\n  /* <Box color=\"primary.main\">caja</Box>\r\n<Box color=\"primary.main\">caja</Box>\r\n<Box\r\n  color=\"primary.contrastText\"\r\n  bgcolor=\"primary.main\"\r\n  m={2}\r\n  p={5}\r\n  border={2}\r\n  borderColor=\"error.main\"\r\n>\r\n  caja\r\n</Box> */\r\n}\r\n","import React from \"react\";\r\nimport { Hidden, makeStyles } from \"@material-ui/core\";\r\nimport Navbar from \"./Navbar\";\r\nimport Cajon from \"./Cajon\";\r\nimport Cajita from \"./Cajita\";\r\n\r\nconst estilos = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Contenedor() {\r\n  const clases = estilos();\r\n  const [abrir, setAbrir] = React.useState(false);\r\n\r\n  const accionAbrir = () => {\r\n    setAbrir(!abrir);\r\n  };\r\n\r\n  return (\r\n    <div className={clases.root}>\r\n      <Navbar accionAbrir={accionAbrir} />\r\n\r\n      <Hidden xsDown>\r\n        <Cajon variant=\"permanent\" open={true} />\r\n      </Hidden>\r\n\r\n      <Hidden smUp>\r\n        <Cajon variant=\"temporary\" open={abrir} onClose={accionAbrir} />\r\n      </Hidden>\r\n\r\n      <div className={clases.content}>\r\n        <div className={clases.toolbar}></div>\r\n        <Cajita />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contenedor;\r\n\r\n// <NavBar />\r\n// {/* Boton material ui */}\r\n// <Button\r\n//   color=\"primary\"\r\n//   variant=\"outlined\"\r\n//   size=\"small\"\r\n//   startIcon={<DeleteIcon />}\r\n// >\r\n//   Delete\r\n// </Button>\r\n// {/* icono Boton */}\r\n// <IconButton aria-label=\"alarm\">\r\n//   <AddAlarmIcon />\r\n// </IconButton>\r\n// {/* tipografia con material UI */}\r\n// <Typography variant=\"body1\" color=\"primary\" align=\"center\">\r\n//   hello world\r\n// </Typography>\r\n\r\n// {/* Boton personalizado con material UI */}\r\n// <Button className={classes.btn_personalizado}>Btn Personalizado</Button>\r\n// <Listas />\r\n\r\n// <Oculto />\r\n","import React from \"react\";\n// import { Button, IconButton, Typography } from \"@material-ui/core\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import AddAlarmIcon from \"@material-ui/icons/AddAlarm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// import Listas from \"./components/Listas\";\n//Components\nimport NavBar from \"./components/Navbar\";\n// import del tema de la app\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./temaConfig\";\n// import Oculto from \"./components/Oculto\";\nimport Contenedor from \"./components/Contenedor\";\n\nconst useStyle = makeStyles({\n  btn_personalizado: {\n    background: \"#5f2c82\",\n    background: \"-webkit-linear-gradient(to right, #5f2c82, #49a09d)\",\n    background: \"linear-gradient(to right, #5f2c82, #49a09d)\",\n    // background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n    color: \"white\",\n    height: 48,\n    padding: \"0 30px\",\n  },\n});\n\nfunction App() {\n  const classes = useStyle();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Contenedor />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}